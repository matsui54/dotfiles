[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
hook_add = '''
  nnoremap <silent><Leader>d <cmd>QuickRun<CR>
'''
hook_source = '''
  let g:quickrun_config = {}
  let g:quickrun_config._ = {}
  if has('nvim')
    let g:quickrun_config._['runner'] = 'nvimterm'
  endif

  let g:quickrun_config['cpp'] = {
        \  'cmdopt' : '-std=c++2a -Wall',
        \  'outputter' : 'quickfix',
        \  'outputter/message/log' : 1
        \ }

  let g:quickrun_config['cpp/compe'] = {
        \  'type': 'cpp/g++',
        \  'input' : 'in.dat',
        \  'runner' : 'system'
        \ }

  let g:quickrun_config['vim'] = {
        \   'command': ':source',
        \   'exec': '%C %S',
        \   'hook/eval/template': 'echo %s',
        \   'runner': 'vimscript',
        \ }
  let g:quickrun_config['lua'] = {
        \   'command': ':luafile',
        \   'exec': '%C %S',
        \   'runner': 'vimscript',
        \ }

  let g:quickrun_config['typescript'] = {
        \   'type': 'typescript/deno'
        \ }

  let g:quickrun_config['gnuplot'] = {
        \   'command': 'gnuplot',
        \   'exec': '%C %S',
        \ }

  let g:quickrun_config['python/compe'] = {
        \  'type': 'python',
        \  'input' : 'in.dat',
        \  'runner' : 'system'
        \ }
'''

[[plugins]]
repo = 'Shougo/deol.nvim'
hook_add = '''
  tnoremap <C-\><C-\> <C-\><C-N><cmd>call deol#start(#{
    \ no-auto-cd: v:true,
    \ toggle: v:true,
    \ })<CR>
  nnoremap <C-\><C-\> <cmd>call deol#start(#{
    \ no-auto-cd: v:true,
    \ toggle: v:true,
    \ winwidth: &columns/2,
    \ split: (winnr('$') == 1 && bufname()=='') ? "" : "vertical",
    \ })<CR>
  nnoremap <C-\>j <cmd>call deol#start(#{
    \ no-auto-cd: v:true,
    \ toggle: v:true,
    \ split: "h",
    \ })<CR>
'''

[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_add = '''
  nnoremap gnw <cmd>Gina browse<CR>
  nnoremap gn<Space> :Gina<Space>
'''
hook_source = '''
	call gina#custom#mapping#nmap(
	      \ '/.*', '<C-j>',
	      \ 'gT'
	      \)
	call gina#custom#mapping#nmap(
	      \ '/.*', '<C-k>',
	      \ 'gt'
	      \)
	call gina#custom#mapping#nmap(
	      \ 'status', '<Space>gc',
	      \ ':<C-u>Gina commit<CR>',
	      \ {'noremap': 1, 'silent': 1},
	      \)
	call gina#custom#mapping#nmap(
	      \ 'status', '<Space>gp',
	      \ ':<C-u>Gina push<CR>',
	      \ {'noremap': 1},
	      \)
	call gina#custom#mapping#nmap(
	      \ 'branch', 'o',
	      \ ':call gina#action#call(''new'')<CR>',
	      \ {'noremap': 1, 'silent': 1},
	      \)
	call gina#custom#mapping#nmap(
	      \ 'branch', 'dd',
	      \ ':call gina#action#call(''delete'')<CR>',
	      \ {'noremap': 1, 'silent': 1},
	      \)
'''

[[plugins]]
repo = 'lambdalisue/gin.vim'
on_event = 'CmdlineEnter'
hook_add = '''
  nnoremap gs <cmd>GinStatus<CR>
  nnoremap gnb <cmd>GinBranch -a<CR>
  nnoremap gnl <cmd>GinLog --graph 
  \ --pretty=format:%Cred%h%Creset\ -%C(yellow)%d%Creset\ %s\ %Cgreen(%ai)\ %C(bold\ blue)<%an>%Creset
  \ <CR>
'''
[plugins.ftplugin]
gin-status = '''
  nnoremap <buffer> <Space>gc <cmd>Gin commit<CR>
  nnoremap <buffer> <Space>gp :Gin push<CR>
'''
gin-branch = '''
  nmap <buffer> o <Plug>(gin-action-new)
  nmap <buffer> dd <Plug>(gin-action-delete)
'''
gitcommit = '''
  setlocal spell
'''
 
# [[plugins]]
# repo = 'nvim-treesitter/nvim-treesitter'
# if = 'has("nvim")'
# on_event = 'BufRead'
# lua_source = '''
# require'nvim-treesitter.configs'.setup {
#     highlight = {
#         enable = true,
#         disable = {'latex', 'help', 'csv'},
#     },
#     refactor = {
#       highlight_defintions = {
#         enable = true
#       },
#       smart_rename = {
#         enable = true,
#         smart_rename = 'grr'
#       },
#       navigation = {
#         enable = true,
#         goto_definition = 'gnd',
#         list_definitions = 'gnD'
#       }
#     },
#     ignore_install = { "phpdoc", "help" },
#     ensure_installed = 'all'
# }
# '''

[[plugins]]
repo = 'neovim/nvim-lspconfig'
if = 'has("nvim")'
on_event = 'BufRead'
lua_source = '''
  require('lsp_rc')
'''
hook_add = '''
  nnoremap \f <cmd>lua vim.lsp.buf.format({ async = true })<CR>
  nnoremap gm <cmd>lua vim.diagnostic.open_float()<CR>
'''

[[plugins]]
repo = 'lambdalisue/suda.vim'
on_cmd = ['SudaRead', 'SudaWrite']
on_event = 'BufRead'

[[plugins]]
repo = 'machakann/vim-swap'
on_map = '<plug>(swap-'
hook_add = '''
  let g:swap_no_default_key_mappings = 1

  nmap <leader>gs <Plug>(swap-interactive)
  xmap <leader>gs <Plug>(swap-interactive)
  nmap g< <Plug>(swap-prev)
  nmap g> <Plug>(swap-next)
'''

[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger)'
hook_add = '''
  let g:git_messenger_no_default_mappings = v:true
  let g:git_messenger_always_into_popup=v:true
  nmap <Leader>gm <Plug>(git-messenger)
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_cmd = 'Qfreplace'

[[plugins]]
repo = 'tyru/capture.vim'
on_cmd = 'Capture'

[[plugins]]
repo = 'thinca/vim-prettyprint'
on_cmd = ['PrettyPrint', 'PP']

[[plugins]]
repo = "mbbill/undotree"
on_cmd = 'UndotreeToggle'

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
  let g:lexima_ctrlh_as_backspace = 1
'''
on_event = 'InsertEnter'
